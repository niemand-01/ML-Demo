# -*- coding: utf-8 -*-
"""Kmeans-tensorflow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1baeZgcLHPVjUg_E2b-aTF8ZB4WbMUBU7
"""

import tensorflow as tf
import numpy as np
from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt
import logging

tf.get_logger().setLevel(logging.ERROR)

X,y = make_blobs(n_samples=100,n_features=2,centers=4)
print(y)
# print(X)

# X[y==0,0] means the corresponding X[i][0] when y[i]==0
plt.scatter(X[y==0,0], X[y==0,1])
plt.scatter(X[y==1,0], X[y==1,1], c='r')
plt.scatter(X[y==2,0], X[y==2, 1], c='b')
plt.scatter(X[y==3,0], X[y==3, 1], c='g')

# config
# batch_size =10

# cluster number
cluster_num = 3 

# placeholder
# xi = tf.placeholder(dtype=tf.float32,shape=[None,784])
# yi = tf.placeholder(dtype=tf.float32,shape=[None,10])

# prepare input data
def input_fn():
  return tf.compat.v1.train.limit_epochs(tf.convert_to_tensor(X,dtype=tf.float32),num_epochs=1)

kmeans = tf.compat.v1.estimator.experimental.KMeans(num_clusters=cluster_num,use_mini_batch=True)

# train
num_iterations = 10
previous_cenetrs = None
for _ in range(num_iterations):
  # kmeans is a unsupervised learning, only feed in data without label y
  kmeans.train(input_fn)
  # after each iteration/epoch calculate new cluster centers
  cluster_centers = kmeans.cluster_centers()
  if previous_cenetrs is not None:
    print('delta:',cluster_centers - previous_cenetrs)
  previous_cenetrs = cluster_centers
  # implicit score ?
  print('score:',kmeans.score(input_fn))
print('cluster centers:',cluster_centers)

# predict
cluster_indices = list(kmeans.predict_cluster_index(input_fn))

# visualize
plt.scatter(X[:,0],X[:,1],c=cluster_indices,cmap='viridis')