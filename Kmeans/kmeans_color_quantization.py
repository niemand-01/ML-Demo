# -*- coding: utf-8 -*-
"""KMeans-Color Quantization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ssv4s7m8XsYLaNB7MEkyFTjRnXafy2Nt
"""

import tensorflow as tf
import numpy as np
from sklearn.cluster import KMeans
import cv2
import matplotlib.pyplot as plt
from sklearn.datasets import make_blobs
from google.colab.patches import cv2_imshow

x,y = make_blobs(n_samples=100, n_features=2,centers=4)
print(len(x))

plt.scatter(x[y==0,0],x[y==0,1])
plt.scatter(x[y==1,0],x[y==1,1],c='r')
plt.scatter(x[y==2,0],x[y==2,1],c='b')
plt.scatter(x[y==3,0],x[y==3,1],c='g')

km = KMeans(n_clusters=3)
km.fit(x)
y_km = km.predict(x)

print(km.labels_)

plt.scatter(x[:,0],x[:,1],c=km.labels_,cmap='viridis')

plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],s=200,alpha=0.5)

plt.scatter(x[:,0],x[:,1],c=km.labels_,cmap='viridis')
plt.scatter(km.cluster_centers_[:,0],km.cluster_centers_[:,1],s=200,alpha=0.5,c='r')

img = cv2.imread('drive/My Drive/ml-demo/pics/beach.jpg',1)
cv2_imshow(img)

def color_quantization(img,k):
  # Defining input data for clustering
  data = np.float32(img).reshape((-1,3))
  # defineing crietria
  criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER,20,1.0)
  # applying cv2.kmeans
  ret,label,center = cv2.kmeans(data,k,None,criteria,10,cv2.KMEANS_RANDOM_CENTERS)
  center = np.uint8(center)
  result = center[label.flatten()]
  result = result.reshape(img.shape)
  return result

color_3 = color_quantization(img,3)
cv2_imshow(color_3)